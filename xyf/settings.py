"""
Django settings for xyf project.

Generated by 'django-admin startproject' using Django 2.2.19.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys
from config import confile

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

'''
django 项目配置
配置优先级: 环境变量 > pro.setting / YML > app.conf
环境变量优先级仅支持值类型(str, int, float, bool), 自动转换还原
'''
CONF_YML = 'conf.yml'
yml = confile.YML(CONF_YML)
# print(yml, 888888)

try:
    # 将YML默认配置加载到settings
    for key in yml.default_settings:
        # print(key, 44444444444)
        locals()[key] = getattr(yml.default_settings, key)
except Exception:
    pass

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ehk6r5u_4d5gtur^b=7ga!ulbhr$u5mzkjob+xeurnudg*m7yb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", yml.debug) == '1'

# ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'suit',  # 后台样式，放admin前面，覆盖admin默认样式 (否则需人工放置模板到项目根目录templates)
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'bootstrap3',
    'ops',
    'generic',  # 通用视图模板


    'a',
    'mirror',
    'vr',
    'b',

]

MIDDLEWARE = [
    # request 上 ==>> 下 --> View --> response 下 ==>> 上
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'generic.middleware.PageRedirectMiddleware',  # 超出游标范围时自动跳转到范围内最近页码
]

ROOT_URLCONF = 'xyf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # 所有页面都需加载的context字典
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # # 'loaders': [
            # #     (
            # #         'django.template.loaders.filesystem.Loader',
            # #         [os.path.join(BASE_DIR, 'templates')],
            # #     ),
            # # ],
            # 'loaders': [
            #     (
            #         'django.template.loaders.app_directories.Loader',
            #         # [os.path.join(BASE_DIR, 'templates')],
            #     ),
            # ],
            # 'libraries': {
            #     'tags': 'templatetags.tags',  # 加载根目录模板标签(左边栏)
            # },
            'builtins': ['templatetags.tags'],  # 加载根目录模板标签(左边栏免load)
        },
    },
]

WSGI_APPLICATION = 'xyf.wsgi.application'

ASGI_APPLICATION = "xyf.routing.application"

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# # 使用MySQL
# engine = 'django.db.backends.mysql'
# options = {'charset': 'utf8mb4', 'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"}

# user = 'root'  # 数据库-用户名
# password = '2017'  # 数据库-密码
# host = '192.168.80.236'  # 数据库-主机
# name = 'xyf'  # 数据库-库名


DATABASES = {
    # 'default': {
    #     'ENGINE': engine,
    #     'NAME': name,
    #     'USER': user,
    #     'PASSWORD': password,
    #     'HOST': host,
    #     # 'PORT': '5432',
    #     # 'TEST': {'NAME': 'test',},
    #     'OPTIONS': options,
    # },

    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'default.sqlite3'),
    },
    'vr': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'vr.sqlite3'),
    },
    'big': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'big.sqlite3'),
    },

}

DATABASE_ROUTERS = ['xyf.db_router.MyRouter']


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'


USE_I18N = True  # LANGUAGE_CODE: zh-hans

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)
BOOTSTRAP3 = {
    # 修改bootstrap3.bootstrap.BOOTSTRAP3_DEFAULTS默认设置
    # 'horizontal_label_class': 'col-md-2', #默认为col-md-3
    # 'horizontal_field_class': 'col-md-8',
}

# logging配置, logging.config.dictConfig(LOGGING字典配置)
log_dir = "logs"
log_name = 'web'
log_level = os.environ.get("LOG_LEVEL", 'DEBUG')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'myformat': {
            'format': '[%(levelname)5s][%(asctime)s]'
                      # '[%(filename)s:%(lineno)d]'
                      ' %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
            # 'style': '%',
        },
        'standard': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d]'
                      '[task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s] %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',
            'formatter': 'myformat'
        },
        'SF': {
            # 'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，根据文件大小自动切
            'filename': os.path.join(BASE_DIR, log_dir, f"{log_name}_info.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 3,  # 备份数为3  xx.log --> xx.log.1 --> xx.log.2 --> xx.log.3 --> 删
            'formatter': 'myformat',
            'encoding': 'utf-8',
        },
        'TF': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 保存到文件，根据时间自动切
            'filename': os.path.join(BASE_DIR, log_dir, f"{log_name}_info.log"),  # 日志文件
            'backupCount': 3,  # 备份数为3  xx.log --> xx.log.2018-08-23_00-00-00 --> xx.log.2018-08-24_00-00-00 --> ...
            'when': 'D',  # 每天一切， 可选值有S/秒 M/分 H/小时 D/天 W0-W6/周(0=周一) midnight/如果没指定时间就默认在午夜
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR, log_dir, f"{log_name}_err.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 5,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
    },
    'loggers': {
        '': {
            # root/根, getLogger()
            # 所有其它logger (propagate=1)都会递归发到根logger
            'handlers': [
                'SF',
                'console',
                'error',
            ],
            # 'level': 'DEBUG',
            'level': os.environ.get("LOG_LEVEL", yml.log_level),
        },

        'django.db.backends': {
            # DBBUG, 打印SQL
            'handlers': ['console'],
            'propagate': False,
            'level': yml.log_level,
        },

    },
}
